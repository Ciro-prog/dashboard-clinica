import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { type ClinicUser } from '@/lib/clinicAuth';
import { useWAHAService } from '@/hooks/useWAHAService';

interface WAHASession {
  name: string;
  status: 'WORKING' | 'STARTING' | 'SCAN_QR_CODE' | 'STOPPED' | 'FAILED';
  qr?: string;
  me?: {
    id: string;
    pushName: string;
  };
}

interface WhatsAppWAHAProps {
  clinic?: ClinicUser;
}

const WhatsAppWAHA = ({ clinic }: WhatsAppWAHAProps) => {
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');
  const [sessionName, setSessionName] = useState<string>('');
  const [autoRefresh, setAutoRefresh] = useState(false);
  const [lastCheck, setLastCheck] = useState<Date | null>(null);

  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const isPollingActive = useRef(false);

  // ‚úÖ CONFIGURAR NOMBRE DE SESI√ìN (UNA SOLA VEZ)
  useEffect(() => {
    if (clinic && !sessionName) {
      let finalSessionName = '';
      
      if (clinic.suscriber?.trim()) {
        finalSessionName = clinic.suscriber.trim();
      } else if (clinic.clinic_id?.trim()) {
        finalSessionName = clinic.clinic_id.trim();
      } else {
        finalSessionName = `clinic-${clinic.clinic_id || 'unknown'}`;
      }
      
      console.log('üì± Configurando nombre de sesi√≥n:', finalSessionName);
      setSessionName(finalSessionName);
    }
  }, [clinic, sessionName]);

  // ‚úÖ Hook personalizado para WAHA con autenticaci√≥n persistente
  const {
    isLoading,
    session,
    qrCode,
    checkSession,
    startAndGetQR,
    deleteSession,
    cleanup
  } = useWAHAService({
    sessionName,
    onSessionUpdate: (sessionData) => {
      setLastCheck(new Date());
    },
    onQRCodeUpdate: (qr) => {
      // QR code se maneja autom√°ticamente en el hook
    },
    onError: (errorMessage) => {
      setError(errorMessage);
      setSuccess('');
    },
    onSuccess: (successMessage) => {
      setSuccess(successMessage);
      setError('');
    }
  });

  // ‚úÖ CLEANUP
  useEffect(() => {
    return () => {
      isPollingActive.current = false;
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      cleanup();
      console.log('üßπ Componente WhatsApp desmontado');
    };
  }, [cleanup]);

  // ‚úÖ VERIFICAR SESI√ìN - ULTRA SIMPLE
  const checkSession = useCallback(async (silent = false) => {
    if (!sessionName || !isMounted.current) return;

    // ‚úÖ Si es acci√≥n manual, detener polling autom√°tico
    if (!silent) {
      console.log('üîç Verificando sesi√≥n manualmente:', sessionName);
      isPollingActive.current = false; // Detener cualquier polling activo
    }
    
    if (!silent) {
      console.log('üîç Verificando sesi√≥n:', sessionName);
    }
    
    try {
      const response = await wahaRequest(`/api/sessions/${sessionName}`);

      if (!isMounted.current) return;

      if (response.ok) {
        const data = await response.json();
        if (!silent) {
          console.log('‚úÖ Sesi√≥n encontrada:', data.status);
          console.log('üìä Datos completos de sesi√≥n:', data);
        }
        setSession(data);
        setError('');
        setLastCheck(new Date());
        if (data.status !== 'SCAN_QR_CODE') {
          setQrCode('');
        } else if (data.status === 'SCAN_QR_CODE' && !qrCode && !silent) {
          // ‚úÖ Si detectamos SCAN_QR_CODE y no tenemos QR, iniciar polling
          console.log('üì± Estado SCAN_QR_CODE detectado, iniciando polling para sincronizar...');
          setTimeout(() => {
            if (isMounted.current) {
              pollSessionStateAndQR();
            }
          }, 1000);
        } else if (data.status === 'SCAN_QR_CODE' && qrCode && !silent) {
          // ‚úÖ Si ya tenemos QR pero verificamos manualmente, iniciar monitoreo
          console.log('üëÄ QR ya disponible, iniciando monitoreo de escaneo...');
          setTimeout(() => {
            if (isMounted.current) {
              pollSessionStateAndQR(1, 30, true); // Monitoreo con QR existente
            }
          }, 1000);
        }
      } else if (response.status === 404) {
        if (!silent) {
          console.log('‚ÑπÔ∏è Sesi√≥n no existe - se puede crear una nueva');
        }
        setSession(null);
        setQrCode('');
        setError('');
        setLastCheck(new Date());
      } else {
        const errorText = await response.text();
        console.error('‚ùå Error HTTP:', response.status, errorText);
        if (!silent) {
          setError(`Error ${response.status}: ${errorText}`);
        }
      }
    } catch (err) {
      console.error('‚ùå Error de conexi√≥n:', err);
      if (!silent) {
        setError('üîå Verificando conexi√≥n... Reintenta en unos momentos.');
      }
    }
  }, [sessionName]); // ‚úÖ Solo depende de sessionName

  // ‚úÖ PROBAR CONECTIVIDAD CON SERVIDOR WAHA
  const testWAHAConnection = useCallback(async () => {
    console.log('üîå Probando conectividad con servidor WAHA...');
    
    try {
      // ‚úÖ Probar primero el endpoint que ya sabemos que funciona
      const response = await wahaRequest('/api/sessions?all=false');

      console.log('üîå Test conectividad GET /sessions - Status:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ WAHA servidor est√° corriendo. Sesiones existentes:', data);
        return true;
      } else if (response.status === 401) {
        console.error('üö® API Key incorrecto o faltante');
        return false;
      } else {
        console.log('‚ö†Ô∏è Servidor responde pero con error:', response.status);
        return false;
      }
    } catch (err) {
      console.error('‚ùå No se puede conectar con servidor WAHA:', err);
      return false;
    }
  }, []);

  // ‚úÖ CREAR SESI√ìN - CORREGIDO SEG√öN DOCUMENTACI√ìN WAHA
  const createSession = useCallback(async () => {
    if (!sessionName || !isMounted.current) return;

    setIsLoading(true);
    setError('');
    setSuccess('');

    try {
      console.log('‚ûï Creando sesi√≥n WAHA:', sessionName);
      
      // ‚úÖ Primero probar conectividad
      const isConnected = await testWAHAConnection();
      if (!isConnected) {
        throw new Error('No se puede conectar con el servidor WAHA. Verifica que est√© corriendo en pampaservers.com:60513');
      }
      
      // ‚úÖ Estructura correcta seg√∫n curl funcionando
      const requestBody = {
        name: sessionName,
        start: true,
        config: {
          metadata: {
            "user.id": sessionName,
            "user.email": "dashboard@clinica.com",
            "clinic": sessionName
          },
          proxy: null,
          debug: false,
          noweb: {
            store: {
              enabled: true,
              fullSync: false
            }
          },
          webhooks: []
        }
      };
      
      console.log('üì§ Enviando petici√≥n a /api/sessions (directo):', requestBody);
      console.log('üì§ Headers enviados:', headers);
      console.log('üì§ URL ser√°: http://pampaservers.com:60513/api/sessions');
      
      const response = await wahaRequest('/api/sessions', {
        method: 'POST',
        body: JSON.stringify(requestBody)
      });

      console.log('üì° Response status:', response.status);
      console.log('üì° Response headers:', Object.fromEntries(response.headers.entries()));

      if (!isMounted.current) return;

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Sesi√≥n creada exitosamente:', data);
        setSession(data);
        setSuccess(`‚úÖ Sesi√≥n "${sessionName}" creada correctamente`);
        
        // ‚úÖ Flujo autom√°tico: verificar estado y obtener QR si es necesario
        setTimeout(async () => {
          if (isMounted.current) {
            console.log('üîÑ Verificando estado post-creaci√≥n...');
            
            // Verificar estado actual del servidor
            try {
              const response = await fetch(`/api/sessions/${sessionName}`, {
                method: 'GET',
                headers
              });

              if (response.ok) {
                const currentData = await response.json();
                console.log('üìä Estado actual verificado:', currentData.status);
                setSession(currentData);
                
                // Iniciar polling persistente para obtener el QR
                console.log('üöÄ Iniciando polling persistente para sincronizar con panel WAHA...');
                setTimeout(() => {
                  if (isMounted.current) {
                    pollSessionStateAndQR();
                  }
                }, 2000);
              }
            } catch (err) {
              console.error('‚ùå Error en verificaci√≥n post-creaci√≥n:', err);
            }
          }
        }, 3000);
      } else {
        const responseText = await response.text();
        console.error('‚ùå Error completo:', {
          status: response.status,
          statusText: response.statusText,
          headers: Object.fromEntries(response.headers.entries()),
          body: responseText
        });
        
        let errorData;
        try {
          errorData = JSON.parse(responseText);
        } catch {
          errorData = { message: responseText };
        }
        
        // ‚úÖ Diagn√≥stico especial para errores comunes
        if (response.status === 405) {
          console.error('üö® Error 405 - Method Not Allowed. Posibles causas:');
          console.error('   1. Servidor WAHA no est√° corriendo');
          console.error('   2. Endpoint incorrecto');
          console.error('   3. M√©todo HTTP no soportado');
          console.error('   4. Headers incorrectos');
          throw new Error('M√©todo no permitido - Verifica que el servidor WAHA est√© corriendo');
        }
        
        if (response.status === 401) {
          console.error('üö® Error 401 - Unauthorized. API Key incorrecto o faltante');
          console.error('   Current API Key:', headers['X-Api-Key']);
          console.error('   Verifica que el API Key sea correcto en el servidor WAHA');
          throw new Error('No autorizado - Verifica el API Key del servidor WAHA');
        }
        
        throw new Error(errorData.message || `HTTP ${response.status}: ${responseText}`);
      }
    } catch (err) {
      console.error('‚ùå Error completo creando sesi√≥n:', err);
      if (isMounted.current) {
        const errorMsg = err instanceof Error ? err.message : 'Error desconocido';
        setError(`Error al crear sesi√≥n: ${errorMsg}`);
      }
    } finally {
      if (isMounted.current) {
        setIsLoading(false);
      }
    }
  }, [sessionName, headers, checkSession]);

  // ‚úÖ ACTUALIZAR SESI√ìN
  const updateSession = useCallback(async () => {
    if (!sessionName || !isMounted.current) return;

    setIsLoading(true);
    setError('');
    setSuccess('');

    try {
      console.log('üîÑ Actualizando sesi√≥n:', sessionName);
      
      const response = await fetch(`/api/sessions/${sessionName}`, {
        method: 'PUT',
        headers,
        body: JSON.stringify({ name: sessionName })
      });

      if (!isMounted.current) return;

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Sesi√≥n actualizada');
        setSession(data);
        setSuccess('‚úÖ Sesi√≥n actualizada correctamente');
        
        setTimeout(() => {
          if (isMounted.current) checkSession();
        }, 10000);
      } else {
        const errorText = await response.text();
        throw new Error(errorText);
      }
    } catch (err) {
      console.error('‚ùå Error actualizando sesi√≥n:', err);
      if (isMounted.current) {
        setError(`Error al actualizar sesi√≥n: ${err instanceof Error ? err.message : 'Error desconocido'}`);
      }
    } finally {
      if (isMounted.current) {
        setIsLoading(false);
      }
    }
  }, [sessionName, headers, checkSession]);

  // ‚úÖ INICIAR SESI√ìN - CORREGIDO SEG√öN DOCUMENTACI√ìN WAHA
  const startSession = useCallback(async () => {
    if (!sessionName || !isMounted.current) return;

    setIsLoading(true);
    setError('');
    setSuccess('');

    try {
      console.log('‚ñ∂Ô∏è Iniciando sesi√≥n WAHA:', sessionName);
      
      // ‚úÖ Endpoint correcto: /api/sessions/{session}/start
      const response = await fetch(`/api/sessions/${sessionName}/start`, {
        method: 'POST',
        headers
      });

      console.log('üì° Response status para start:', response.status);

      if (!isMounted.current) return;

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Sesi√≥n iniciada:', data);
        setSuccess('‚úÖ Sesi√≥n iniciada correctamente');
        
        // Verificar estado despu√©s de iniciar
        setTimeout(() => {
          if (isMounted.current) {
            console.log('üîÑ Verificando estado post-inicio...');
            checkSession();
          }
        }, 10000); // M√°s tiempo para que se inicie completamente
      } else {
        const errorText = await response.text();
        console.error('‚ùå Error al iniciar:', response.status, errorText);
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }
    } catch (err) {
      console.error('‚ùå Error iniciando sesi√≥n:', err);
      if (isMounted.current) {
        const errorMsg = err instanceof Error ? err.message : 'Error desconocido';
        setError(`Error al iniciar sesi√≥n: ${errorMsg}`);
      }
    } finally {
      if (isMounted.current) {
        setIsLoading(false);
      }
    }
  }, [sessionName, headers, checkSession]);

  // ‚úÖ DETENER SESI√ìN
  const stopSession = useCallback(async () => {
    if (!sessionName || !isMounted.current) return;

    setIsLoading(true);
    setError('');
    setSuccess('');

    try {
      console.log('‚èπÔ∏è Deteniendo sesi√≥n:', sessionName);
      
      // ‚úÖ Endpoint correcto: /api/sessions/{session}/stop
      const response = await fetch(`/api/sessions/${sessionName}/stop`, {
        method: 'POST',
        headers
      });

      if (!isMounted.current) return;

      if (response.ok) {
        console.log('‚úÖ Sesi√≥n detenida');
        setSuccess('‚úÖ Sesi√≥n detenida correctamente');
        setQrCode('');
        
        setTimeout(() => {
          if (isMounted.current) checkSession();
        }, 1000);
      } else {
        const errorText = await response.text();
        throw new Error(errorText);
      }
    } catch (err) {
      console.error('‚ùå Error deteniendo sesi√≥n:', err);
      if (isMounted.current) {
        setError(`Error al detener sesi√≥n: ${err instanceof Error ? err.message : 'Error desconocido'}`);
      }
    } finally {
      if (isMounted.current) {
        setIsLoading(false);
      }
    }
  }, [sessionName, headers, checkSession]);

  // ‚úÖ REINICIAR SESI√ìN
  const restartSession = useCallback(async () => {
    if (!sessionName || !isMounted.current) return;

    setIsLoading(true);
    setError('');
    setSuccess('');

    try {
      console.log('üîÑ Reiniciando sesi√≥n:', sessionName);
      
      // ‚úÖ Endpoint correcto: /api/sessions/{session}/restart
      const response = await fetch(`/api/sessions/${sessionName}/restart`, {
        method: 'POST',
        headers
      });

      if (!isMounted.current) return;

      if (response.ok) {
        console.log('‚úÖ Sesi√≥n reiniciada');
        setSuccess('‚úÖ Sesi√≥n reiniciada correctamente');
        
        setTimeout(() => {
          if (isMounted.current) checkSession();
        }, 2000);
      } else {
        const errorText = await response.text();
        throw new Error(errorText);
      }
    } catch (err) {
      console.error('‚ùå Error reiniciando sesi√≥n:', err);
      if (isMounted.current) {
        setError(`Error al reiniciar sesi√≥n: ${err instanceof Error ? err.message : 'Error desconocido'}`);
      }
    } finally {
      if (isMounted.current) {
        setIsLoading(false);
      }
    }
  }, [sessionName, headers, checkSession]);

  // ‚úÖ ELIMINAR SESI√ìN
  const deleteSession = useCallback(async () => {
    if (!sessionName || !isMounted.current) return;
    
    if (!confirm(`¬øEliminar la sesi√≥n "${sessionName}"?`)) return;

    setIsLoading(true);
    setError('');
    setSuccess('');

    try {
      console.log('üóëÔ∏è Eliminando sesi√≥n:', sessionName);
      
      // ‚úÖ Endpoint correcto para eliminar: /api/sessions/{session}
      const response = await fetch(`/api/sessions/${sessionName}`, {
        method: 'DELETE',
        headers
      });

      if (!isMounted.current) return;

      if (response.ok) {
        console.log('‚úÖ Sesi√≥n eliminada');
        setSession(null);
        setQrCode('');
        setSuccess('‚úÖ Sesi√≥n eliminada correctamente');
      } else {
        const errorText = await response.text();
        throw new Error(errorText);
      }
    } catch (err) {
      console.error('‚ùå Error eliminando sesi√≥n:', err);
      if (isMounted.current) {
        setError(`Error al eliminar sesi√≥n: ${err instanceof Error ? err.message : 'Error desconocido'}`);
      }
    } finally {
      if (isMounted.current) {
        setIsLoading(false);
      }
    }
  }, [sessionName, headers]);

  // ‚úÖ POLLING PERSISTENTE PARA QR AUTOM√ÅTICO Y DETECCI√ìN DE ESCANEO
  const pollSessionStateAndQR = useCallback(async (attempt = 1, maxAttempts = 50, hasQR = false) => {
    if (!sessionName || !isMounted.current) return;

    // ‚úÖ EVITAR M√öLTIPLES POLLINGS SIMULT√ÅNEOS
    if (isPollingActive.current && attempt === 1) {
      console.log('‚ö†Ô∏è Polling ya est√° activo, cancelando nuevo inicio');
      return;
    }

    if (attempt === 1) {
      isPollingActive.current = true;
      console.log('üöÄ Iniciando nuevo ciclo de polling');
    }

    // ‚úÖ VERIFICAR SI POLLING FUE DETENIDO
    if (!isPollingActive.current) {
      console.log('‚èπÔ∏è Polling cancelado por control externo');
      return;
    }

    const phase = hasQR ? 'monitoreo' : 'obtenci√≥n QR';
    console.log(`üîÑ Polling ${phase} - Intento ${attempt}/${maxAttempts}`);
    
    try {
      // Verificar estado actual
      const response = await fetch(`/api/sessions/${sessionName}`, {
        method: 'GET',
        headers
      });

      if (!isMounted.current) return;

      if (response.ok) {
        const data = await response.json();
        console.log(`üìä Polling ${attempt}: Estado = ${data.status}`);
        setSession(data);
        setError('');
        setLastCheck(new Date());
        
        // ‚úÖ DETECTAR CONEXI√ìN EXITOSA (QR ESCANEADO)
        if (data.status === 'WORKING') {
          console.log('üéâ ¬°QR ESCANEADO! Sesi√≥n conectada exitosamente');
          setSuccess('üéâ ¬°C√≥digo QR escaneado exitosamente! WhatsApp conectado');
          setQrCode(''); // Limpiar QR ya que no se necesita m√°s
          isPollingActive.current = false; // ‚úÖ Detener polling
          return; // ‚úÖ √âxito total, terminar polling
        }
        
        // ‚ùå DETECTAR FALLO DE SESI√ìN
        if (data.status === 'FAILED') {
          console.log('‚ùå Sesi√≥n fall√≥, deteniendo polling');
          setError('üîÑ Reconectando... Si el problema persiste, inicia una nueva sesi√≥n.');
          setQrCode(''); // Limpiar QR
          isPollingActive.current = false; // ‚úÖ Detener polling
          return; // ‚ùå Error, terminar polling
        }
        
        // üì± OBTENER QR AUTOM√ÅTICAMENTE
        if (data.status === 'SCAN_QR_CODE' && !hasQR) {
          console.log('‚úÖ Estado SCAN_QR_CODE confirmado, obteniendo QR autom√°ticamente...');
          
          try {
            const qrResponse = await fetch(`/api/sessions/${sessionName}/auth/qr`, {
              method: 'GET',
              headers
            });

            if (qrResponse.ok) {
              const contentType = qrResponse.headers.get('content-type');
              
              if (contentType?.includes('image/png')) {
                const blob = await qrResponse.blob();
                const reader = new FileReader();
                reader.onload = () => {
                  if (isMounted.current) {
                    setQrCode(reader.result as string);
                    setSuccess(`üì± C√≥digo QR listo para escanear`);
                    console.log(`üéØ QR obtenido exitosamente, iniciando monitoreo de escaneo...`);
                    
                    // ‚úÖ CONTINUAR POLLING PARA DETECTAR ESCANEO
                    setTimeout(() => {
                      if (isMounted.current) {
                        pollSessionStateAndQR(1, 30, true); // Nuevo ciclo con m√°s intentos para monitoreo
                      }
                    }, 3000);
                  }
                };
                reader.readAsDataURL(blob);
                return; // QR obtenido, nuevo ciclo iniciado
              } else {
                const qrData = await qrResponse.json();
                if (qrData.qr) {
                  if (isMounted.current) {
                    setQrCode(qrData.qr);
                    setSuccess(`üì± C√≥digo QR listo para escanear`);
                    console.log(`üéØ QR obtenido exitosamente, iniciando monitoreo de escaneo...`);
                    
                    // ‚úÖ CONTINUAR POLLING PARA DETECTAR ESCANEO
                    setTimeout(() => {
                      if (isMounted.current) {
                        pollSessionStateAndQR(1, 30, true); // Nuevo ciclo con m√°s intentos para monitoreo
                      }
                    }, 3000);
                  }
                  return; // QR obtenido, nuevo ciclo iniciado
                }
              }
            }
            
            console.log(`‚ö†Ô∏è Intento ${attempt}: QR no disponible, status ${qrResponse.status}`);
            
          } catch (qrError) {
            console.log(`‚ö†Ô∏è Intento ${attempt}: Error obteniendo QR:`, qrError);
          }
        }
        
        // üëÄ MONITOREO CONTINUO POST-QR
        if (data.status === 'SCAN_QR_CODE' && hasQR) {
          console.log(`üëÄ Monitoreando escaneo de QR - ${attempt}/${maxAttempts}`);
          setSuccess(`üì± Esperando que escanees el c√≥digo QR... (${attempt}/${maxAttempts})`);
        }
        
        // ‚è≥ ESTADO TRANSITORIO
        if (data.status === 'STARTING') {
          console.log(`‚è≥ Sesi√≥n iniciando - ${attempt}/${maxAttempts}`);
          setSuccess(`‚è≥ Iniciando WhatsApp... (${attempt}/${maxAttempts})`);
        }
        
        // üîÑ CONTINUAR POLLING
        if (attempt < maxAttempts && isMounted.current && isPollingActive.current) {
          setTimeout(() => {
            if (isMounted.current && isPollingActive.current) {
              pollSessionStateAndQR(attempt + 1, maxAttempts, hasQR);
            }
          }, 3000);
        } else if (attempt >= maxAttempts) {
          console.log(`‚è∞ Se agotaron los ${maxAttempts} intentos de polling`);
          isPollingActive.current = false; // ‚úÖ Detener polling
          
          if (hasQR) {
            setError(`‚è∞ El c√≥digo QR no fue escaneado en el tiempo esperado. El QR sigue siendo v√°lido, puedes escanearlo cuando gustes.`);
          } else {
            setError(`‚è∞ No se pudo obtener el QR despu√©s de ${maxAttempts} intentos. Usa el bot√≥n "Verificar Estado" manualmente.`);
          }
        }
        
      } else {
        console.log(`‚ùå Polling ${attempt}: Error HTTP ${response.status}`);
        
        // Continuar polling en caso de errores temporales
        if (attempt < maxAttempts && isMounted.current && isPollingActive.current) {
          setTimeout(() => {
            if (isMounted.current && isPollingActive.current) {
              pollSessionStateAndQR(attempt + 1, maxAttempts, hasQR);
            }
          }, 3000);
        } else {
          isPollingActive.current = false; // ‚úÖ Detener polling
          setError('üîÑ Reintentando conexi√≥n... Usa el bot√≥n "Verificar Estado" si contin√∫a.');
        }
      }
      
    } catch (error) {
      console.error(`‚ùå Polling ${attempt} error:`, error);
      
      // Continuar polling en caso de errores de red
      if (attempt < maxAttempts && isMounted.current && isPollingActive.current) {
        setTimeout(() => {
          if (isMounted.current && isPollingActive.current) {
            pollSessionStateAndQR(attempt + 1, maxAttempts, hasQR);
          }
        }, 3000);
      } else {
        isPollingActive.current = false; // ‚úÖ Detener polling
        setError('üîÑ Reintentando conexi√≥n... Usa el bot√≥n "Verificar Estado" si contin√∫a.');
      }
    }
  }, [sessionName, headers]);

  // ‚úÖ OBTENER QR CON REINTENTOS AUTOM√ÅTICOS PARA 404
  const getQR = useCallback(async (retryCount = 0, maxRetries = 5) => {
    if (!sessionName || !isMounted.current) return;

    // ‚úÖ ACCI√ìN MANUAL - Detener polling autom√°tico
    if (retryCount === 0) {
      console.log('üì± Obteniendo QR manualmente - deteniendo polling autom√°tico');
      isPollingActive.current = false; // Detener polling
      setIsLoading(true);
      setError('');
    }

    // Solo mostrar loading en el primer intento
    if (retryCount === 0) {
      setIsLoading(true);
      setError('');
    }

    // ‚úÖ Endpoint correcto seg√∫n documentaci√≥n WAHA: /api/sessions/{session}/auth/qr
    const qrEndpoints = [
      `/api/sessions/${sessionName}/auth/qr`, // ‚úÖ Formato correcto seg√∫n docs
      `/api/${sessionName}/auth/qr`, // Fallback
      `/api/${sessionName}/qr`, // Fallback adicional
    ];

    try {
      if (retryCount === 0) {
        console.log('üì∑ Obteniendo QR para sesi√≥n:', sessionName);
      } else {
        console.log(`üì∑ Reintento ${retryCount}/${maxRetries} obteniendo QR para sesi√≥n:`, sessionName);
        setSuccess(`üîÑ Reintentando obtener QR (${retryCount}/${maxRetries})...`);
      }
      
      let qrFound = false;
      let lastError = null;

      for (const endpoint of qrEndpoints) {
        if (!isMounted.current || qrFound) break;

        try {
          console.log(`üîç Probando: ${endpoint} ${retryCount > 0 ? `(reintento ${retryCount})` : ''}`);
          
          const response = await fetch(endpoint, {
            method: 'GET',
            headers
          });

          if (response.ok) {
            const contentType = response.headers.get('content-type');
            
            if (contentType?.includes('image/png')) {
              const blob = await response.blob();
              const reader = new FileReader();
              reader.onload = () => {
                if (isMounted.current) {
                  setQrCode(reader.result as string);
                  setSuccess(`‚úÖ QR obtenido desde: ${endpoint}${retryCount > 0 ? ` (tras ${retryCount} reintentos)` : ''}`);
                  qrFound = true;
                }
              };
              reader.readAsDataURL(blob);
              break;
            } else {
              const data = await response.json();
              if (data.qr) {
                if (isMounted.current) {
                  setQrCode(data.qr);
                  setSuccess(`‚úÖ QR obtenido desde: ${endpoint}${retryCount > 0 ? ` (tras ${retryCount} reintentos)` : ''}`);
                  qrFound = true;
                }
                break;
              }
            }
          } else if (response.status === 404) {
            // ‚úÖ Error 404 - puede ser temporal, guardar para reintentar
            lastError = `QR no disponible a√∫n (404)`;
            console.log(`‚ö†Ô∏è ${endpoint}: 404 - QR no disponible a√∫n`);
          } else {
            // Otros errores HTTP
            lastError = `HTTP ${response.status}`;
            console.log(`‚ùå ${endpoint}: ${response.status}`);
          }
        } catch (endpointErr) {
          lastError = endpointErr instanceof Error ? endpointErr.message : 'Error de conexi√≥n';
          console.log(`‚ùå Error en ${endpoint}:`, endpointErr);
        }
      }

      // ‚úÖ Si no se encontr√≥ QR y es un 404, reintentar
      if (!qrFound && isMounted.current) {
        if (lastError?.includes('404') && retryCount < maxRetries) {
          console.log(`üîÑ QR no disponible, reintentando en 3 segundos... (${retryCount + 1}/${maxRetries})`);
          
          // Esperar 3 segundos antes del siguiente intento
          setTimeout(() => {
            if (isMounted.current) {
              getQR(retryCount + 1, maxRetries);
            }
          }, 3000);
          
          return; // No finalizar la funci√≥n a√∫n
        } else {
          // Se agotaron los reintentos o es otro tipo de error
          const errorMsg = lastError?.includes('404') 
            ? `QR no disponible despu√©s de ${maxRetries} intentos. La sesi√≥n puede no estar lista para mostrar el QR a√∫n.`
            : `No se pudo obtener el QR: ${lastError || 'Error desconocido'}`;
          
          throw new Error(errorMsg);
        }
      }
    } catch (err) {
      console.error('‚ùå Error obteniendo QR:', err);
      if (isMounted.current) {
        setError(`Error al obtener QR: ${err instanceof Error ? err.message : 'Error desconocido'}`);
      }
    } finally {
      // Solo finalizar loading si no vamos a reintentar
      if (isMounted.current && (retryCount >= maxRetries || retryCount === 0)) {
        setIsLoading(false);
      }
    }
  }, [sessionName, headers]);

  // ‚úÖ INICIAR Y OBTENER QR
  const startAndGetQR = useCallback(async () => {
    if (!sessionName || !isMounted.current) return;

    setIsLoading(true);
    setError('');
    setSuccess('');

    try {
      console.log('üöÄ Iniciando sesi√≥n y obteniendo QR');
      
      // ‚úÖ Iniciar sesi√≥n con endpoint correcto
      const startResponse = await fetch(`/api/sessions/${sessionName}/start`, {
        method: 'POST',
        headers
      });

      if (!startResponse.ok) {
        const errorText = await startResponse.text();
        throw new Error(`Error al iniciar: ${errorText}`);
      }

      if (!isMounted.current) return;

      // Esperar un momento para que la sesi√≥n se inicialice
      await new Promise(resolve => setTimeout(resolve, 3000));

      if (!isMounted.current) return;

      // Verificar estado ACTUAL del servidor antes de obtener QR
      const response = await fetch(`/api/sessions/${sessionName}`, {
        method: 'GET',
        headers
      });

      if (response.ok) {
        const currentData = await response.json();
        console.log('üìä Estado actual despu√©s de iniciar:', currentData.status);
        setSession(currentData);
        
        // Iniciar polling persistente independientemente del estado
        console.log('üöÄ Iniciando polling persistente desde startAndGetQR...');
        pollSessionStateAndQR();
      } else {
        console.error('‚ùå Error verificando estado despu√©s de iniciar:', response.status);
      }
      
    } catch (err) {
      console.error('‚ùå Error en startAndGetQR:', err);
      if (isMounted.current) {
        setError(`Error: ${err instanceof Error ? err.message : 'Error desconocido'}`);
      }
    } finally {
      if (isMounted.current) {
        setIsLoading(false);
      }
    }
  }, [sessionName, headers, checkSession, getQR]);

  // ‚úÖ VERIFICAR AL CARGAR
  useEffect(() => {
    if (sessionName && isMounted.current) {
      checkSession();
    }
  }, [sessionName, checkSession]);

  // ‚úÖ SISTEMA DE AUTO-REFRESH CADA 3 MINUTOS - CORREGIDO
  useEffect(() => {
    if (sessionName && autoRefresh && isMounted.current) {
      console.log('‚è∞ Configurando auto-refresh cada 3 minutos para:', sessionName);
      
      // Limpiar interval existente
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      
      // Crear nuevo interval
      intervalRef.current = setInterval(() => {
        if (isMounted.current && autoRefresh) {
          console.log('üîÑ Auto-refresh ejecut√°ndose...');
          // ‚úÖ Llamar directamente a la funci√≥n para evitar dependencias circulares
          const doSilentCheck = async () => {
            if (!sessionName || !isMounted.current) return;
            
            try {
              const response = await fetch(`/api/sessions/${sessionName}`, {
                method: 'GET',
                headers
              });

              if (!isMounted.current) return;

              if (response.ok) {
                const data = await response.json();
                setSession(data);
                setError('');
                setLastCheck(new Date());
                if (data.status !== 'SCAN_QR_CODE') {
                  setQrCode('');
                }
              } else if (response.status === 404) {
                setSession(null);
                setQrCode('');
                setError('');
                setLastCheck(new Date());
              }
            } catch (err) {
              // Error silencioso en auto-refresh
              console.log('üîÑ Auto-refresh: Error de conexi√≥n (normal)');
            }
          };
          
          doSilentCheck();
        }
      }, 3 * 60 * 1000); // 3 minutos
      
      return () => {
        if (intervalRef.current) {
          clearInterval(intervalRef.current);
          intervalRef.current = null;
        }
      };
    }
  }, [sessionName, autoRefresh]); // ‚úÖ Solo estas dependencias

  // ‚úÖ TOGGLE PARA AUTO-REFRESH
  const toggleAutoRefresh = useCallback(() => {
    setAutoRefresh(prev => {
      const newValue = !prev;
      console.log(`üîÑ Auto-refresh ${newValue ? 'activado' : 'desactivado'}`);
      
      if (!newValue && intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
        console.log('‚è∞ Interval limpiado');
      }
      
      return newValue;
    });
  }, []);

  // ‚úÖ LIMPIAR MENSAJES
  useEffect(() => {
    if (success) {
      const timer = setTimeout(() => {
        if (isMounted.current) setSuccess('');
      }, 4000);
      return () => clearTimeout(timer);
    }
  }, [success]);

  // ‚úÖ FUNCIONES HELPER
  const getBadgeColor = (status: string) => {
    switch (status) {
      case 'WORKING': return 'bg-green-500';
      case 'STARTING': return 'bg-yellow-500';
      case 'SCAN_QR_CODE': return 'bg-blue-500';
      case 'STOPPED': return 'bg-gray-500';
      case 'FAILED': return 'bg-red-500';
      default: return 'bg-gray-400';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'WORKING': return '‚úÖ Conectado';
      case 'STARTING': return 'üü° Iniciando...';
      case 'SCAN_QR_CODE': return 'üì∑ Escanear QR';
      case 'STOPPED': return '‚èπÔ∏è Detenido';
      case 'FAILED': return '‚ùå Error';
      default: return '‚ùì Desconocido';
    }
  };

  // ‚úÖ LOADING STATE
  if (!clinic) {
    return (
      <div className="flex justify-center items-center py-8">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-2 text-sm text-gray-600">Cargando...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* HEADER SIMPLIFICADO */}
      <Card className="bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 border-green-200 dark:border-green-700">
        <CardHeader className="text-center">
          <CardTitle className="text-xl flex items-center justify-center gap-2">
            üì± WhatsApp Business
            {session && (
              <Badge className={`${getBadgeColor(session.status)} text-white ml-2`}>
                {getStatusText(session.status)}
              </Badge>
            )}
          </CardTitle>
          <CardDescription className="text-lg">
            {clinic.name_clinic}
          </CardDescription>
        </CardHeader>
      </Card>

      {/* MENSAJES IMPORTANTES */}
      {error && (
        <Alert className="border-red-200 dark:border-red-800 bg-red-50 dark:bg-red-900/20">
          <AlertDescription className="text-red-700 dark:text-red-300 text-center font-medium">
            ‚ùå {error}
          </AlertDescription>
        </Alert>
      )}
      
      {success && (
        <Alert className="border-green-200 dark:border-green-800 bg-green-50 dark:bg-green-900/20">
          <AlertDescription className="text-green-700 dark:text-green-300 text-center font-medium">
            {success}
          </AlertDescription>
        </Alert>
      )}

      {/* ESTADO ACTUAL Y ACCIONES PRINCIPALES */}
      <Card className="bg-card dark:bg-card">
        <CardContent className="py-6 bg-card dark:bg-card">
          {!session ? (
            <div className="text-center space-y-4">
              <div className="text-gray-600 dark:text-gray-300 mb-4">
                <p className="text-lg">üîó No hay conexi√≥n con WhatsApp</p>
                <p className="text-sm">Necesitas crear una nueva conexi√≥n</p>
              </div>
              <Button 
                onClick={createSession} 
                disabled={isLoading} 
                className="bg-green-600 hover:bg-green-700 dark:bg-green-500 dark:hover:bg-green-600 text-white px-8 py-3 text-lg"
                size="lg"
              >
                {isLoading ? '‚è≥ Creando...' : 'üöÄ Conectar WhatsApp'}
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              {/* ESTADO WORKING - CONECTADO */}
              {session.status === 'WORKING' && (
                <div className="text-center space-y-4">
                  <div className="text-green-600 dark:text-green-400 mb-4">
                    <div className="w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-3">
                      <span className="text-2xl">‚úÖ</span>
                    </div>
                    <p className="text-xl font-semibold text-foreground">¬°WhatsApp Conectado!</p>
                    {session.me && (
                      <p className="text-sm text-foreground">Conectado como: <strong>{session.me.pushName}</strong></p>
                    )}
                  </div>
                  <Button 
                    onClick={stopSession} 
                    disabled={isLoading} 
                    variant="outline"
                    className="border-red-300 dark:border-red-700 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20"
                  >
                    {isLoading ? '‚è≥ Desconectando...' : 'üîå Desconectar'}
                  </Button>
                </div>
              )}

              {/* ESTADO SCAN_QR_CODE - NECESITA ESCANEAR */}
              {session.status === 'SCAN_QR_CODE' && (
                <div className="text-center space-y-4">
                  <div className="text-blue-600 dark:text-blue-400 mb-4">
                    <div className="w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mx-auto mb-3">
                      <span className="text-2xl">üì±</span>
                    </div>
                    <p className="text-xl font-semibold text-foreground">Escanea el c√≥digo QR</p>
                    <p className="text-sm text-foreground">Abre WhatsApp en tu tel√©fono para conectar</p>
                  </div>
                  
                  {!qrCode && (
                    <Button 
                      onClick={getQR} 
                      disabled={isLoading} 
                      className="bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 text-white"
                    >
                      {isLoading ? '‚è≥ Generando...' : 'üì∑ Mostrar c√≥digo QR'}
                    </Button>
                  )}
                </div>
              )}

              {/* ESTADO STARTING - INICIANDO */}
              {session.status === 'STARTING' && (
                <div className="text-center space-y-4">
                  <div className="text-yellow-600 dark:text-yellow-400 mb-4">
                    <div className="w-16 h-16 bg-yellow-100 dark:bg-yellow-900 rounded-full flex items-center justify-center mx-auto mb-3">
                      <div className="w-8 h-8 border-4 border-yellow-600 dark:border-yellow-400 border-t-transparent rounded-full animate-spin"></div>
                    </div>
                    <p className="text-xl font-semibold text-foreground">Iniciando WhatsApp...</p>
                    <p className="text-sm text-foreground">Esto puede tomar unos momentos</p>
                  </div>
                </div>
              )}

              {/* ESTADO STOPPED - DETENIDO */}
              {session.status === 'STOPPED' && (
                <div className="text-center space-y-4">
                  <div className="text-gray-600 mb-4">
                    <div className="w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-3">
                      <span className="text-2xl">‚è∏Ô∏è</span>
                    </div>
                    <p className="text-xl font-semibold">WhatsApp Desconectado</p>
                    <p className="text-sm">La conexi√≥n est√° pausada</p>
                  </div>
                  <div className="flex gap-3 justify-center">
                    <Button 
                      onClick={startAndGetQR} 
                      disabled={isLoading} 
                      className="bg-green-600 hover:bg-green-700 text-white"
                    >
                      {isLoading ? '‚è≥ Iniciando...' : 'üöÄ Iniciar y Conectar'}
                    </Button>
                    <Button 
                      onClick={deleteSession} 
                      disabled={isLoading} 
                      variant="outline"
                      className="border-red-300 dark:border-red-700 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20"
                    >
                      {isLoading ? '‚è≥ Eliminando...' : 'üóëÔ∏è Eliminar'}
                    </Button>
                  </div>
                </div>
              )}

              {/* ESTADO FAILED - ERROR */}
              {session.status === 'FAILED' && (
                <div className="text-center space-y-4">
                  <div className="text-red-600 mb-4">
                    <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-3">
                      <span className="text-2xl">‚ùå</span>
                    </div>
                    <p className="text-xl font-semibold">Error de Conexi√≥n</p>
                    <p className="text-sm">Algo sali√≥ mal con la conexi√≥n</p>
                  </div>
                  <div className="flex gap-3 justify-center">
                    <Button 
                      onClick={restartSession} 
                      disabled={isLoading} 
                      className="bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 text-white"
                    >
                      {isLoading ? '‚è≥ Reintentando...' : 'üîÑ Reintentar'}
                    </Button>
                    <Button 
                      onClick={deleteSession} 
                      disabled={isLoading} 
                      variant="outline"
                      className="border-red-300 dark:border-red-700 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20"
                    >
                      {isLoading ? '‚è≥ Eliminando...' : 'üóëÔ∏è Empezar de Nuevo'}
                    </Button>
                  </div>
                </div>
              )}

              {/* BOTONES AUXILIARES */}
              <div className="flex justify-center pt-4">
                <Button 
                  onClick={() => checkSession()} 
                  disabled={isLoading} 
                  variant="ghost" 
                  size="sm"
                  className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200"
                >
                  {isLoading ? 'üîÑ' : 'üîç'} Verificar Estado
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* QR CODE - AUTO MOSTRADO */}
      {session?.status === 'SCAN_QR_CODE' && qrCode && (
        <Card className="border-blue-200 dark:border-blue-700 bg-card dark:bg-card">
          <CardContent className="py-6">
            <div className="text-center space-y-4">
              <h3 className="text-lg font-semibold text-blue-800 dark:text-blue-200">üì± Escanear con WhatsApp</h3>
              
              <div className="bg-white dark:bg-gray-800 p-4 rounded-lg inline-block shadow-md">
                <img 
                  src={qrCode} 
                  alt="C√≥digo QR de WhatsApp" 
                  className="w-56 h-56 mx-auto"
                  onError={() => setError('üì∑ C√≥digo QR no disponible. Usa el bot√≥n "Actualizar C√≥digo".')}
                />
              </div>

              <div className="bg-blue-50 dark:bg-gray-700 p-4 rounded-lg text-sm text-gray-700 dark:text-gray-200 max-w-md mx-auto">
                <p className="font-semibold mb-2 text-blue-800 dark:text-blue-200">üì≤ Pasos para conectar:</p>
                <div className="text-left space-y-1">
                  <p className="text-gray-700 dark:text-gray-200">1Ô∏è‚É£ Abre WhatsApp en tu tel√©fono</p>
                  <p className="text-gray-700 dark:text-gray-200">2Ô∏è‚É£ Ve a Men√∫ (‚ãÆ) ‚Üí Dispositivos vinculados</p>
                  <p className="text-gray-700 dark:text-gray-200">3Ô∏è‚É£ Toca "Vincular dispositivo"</p>
                  <p className="text-gray-700 dark:text-gray-200">4Ô∏è‚É£ Escanea este c√≥digo QR</p>
                </div>
              </div>

              <Button 
                onClick={getQR} 
                variant="outline" 
                size="sm"
                className="border-blue-300 dark:border-blue-600 text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/30"
              >
                üîÑ Actualizar C√≥digo
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default WhatsAppWAHA;
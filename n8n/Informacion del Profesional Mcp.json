{
  "name": "Informacion del Profesional Mcp",
  "nodes": [
    {
      "parameters": {
        "path": "32b9ee6e-1b55-4c1c-8ebc-d617dd66df0b"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "typeVersion": 1,
      "position": [
        -160,
        -120
      ],
      "id": "158515b3-082e-4bfb-ab59-43a8fe345146",
      "name": "MCP Server Trigger",
      "webhookId": "32b9ee6e-1b55-4c1c-8ebc-d617dd66df0b"
    },
    {
      "parameters": {
        "description": "# Herramienta: Consultorio M√©dico\n\n**Descripci√≥n:**\nProporciona informaci√≥n completa sobre un consultorio m√©dico, incluyendo precios de servicios, horarios de atenci√≥n, servicios disponibles, datos de contacto y especialidades m√©dicas.\n\n**Cu√°ndo usar:**\n- Cuando el usuario pregunte sobre costos o tarifas m√©dicas\n- Para consultar horarios de atenci√≥n del consultorio\n- Para conocer qu√© servicios m√©dicos se ofrecen\n- Para obtener informaci√≥n de contacto (tel√©fono, direcci√≥n, email)\n- Para saber qu√© especialidades m√©dicas est√°n disponibles\n\n**Formato de entrada:**\n```json\n{\n  \"consulta\": \"texto de la consulta del usuario\"\n}\n```\n\n**Ejemplos de consultas que maneja:**\n- `{\"consulta\": \"precios\"}` ‚Üí Tarifas de todos los servicios\n- `{\"consulta\": \"horarios\"}` ‚Üí Horarios de atenci√≥n\n- `{\"consulta\": \"servicios\"}` ‚Üí Lista completa de servicios\n- `{\"consulta\": \"contacto\"}` ‚Üí Informaci√≥n de contacto\n- `{\"consulta\": \"especialidades\"}` ‚Üí Especialidades m√©dicas disponibles\n- `{\"consulta\": \"cu√°nto cuesta una consulta\"}` ‚Üí Precios espec√≠ficos\n- `{\"consulta\": \"a qu√© hora abren\"}` ‚Üí Horarios de atenci√≥n\n\n**Respuesta:**\nRetorna un JSON estructurado con la informaci√≥n solicitada, incluyendo timestamp y categorizaci√≥n autom√°tica de la consulta.\n\n**Categor√≠as detectadas autom√°ticamente:**\n- **Precios**: palabras como \"precio\", \"costo\", \"tarifa\", \"cu√°nto\"\n- **Horarios**: palabras como \"horario\", \"hora\", \"tiempo\", \"abren\", \"cierran\"\n- **Servicios**: palabras como \"servicio\", \"qu√© hacen\", \"ofertas\"\n- **Contacto**: palabras como \"contacto\", \"tel√©fono\", \"direcci√≥n\"\n- **Especialidades**: palabras como \"especialidad\", \"especialista\", \"doctor\"",
        "jsCode": "// ============ DATOS DEL CONSULTORIO ============\nconst CONSULTORIO_DATA = {\n  precios: {\n    consulta_general: 50000,\n    consulta_especializada: 75000,\n    cirugia_menor: 150000,\n    cirugia_mayor: 300000,\n    urgencias: 80000,\n    domicilio: 120000\n  },\n  horarios: {\n    lunes_viernes: \"8:00 AM - 7:00 PM\",\n    sabados: \"8:00 AM - 1:00 PM\",\n    domingos: \"Solo urgencias\",\n    urgencias_24h: \"Disponible\"\n  },\n  servicios: [\n    \"Consulta m√©dica general\",\n    \"Especialidades m√©dicas\",\n    \"Cirug√≠as menores y mayores\", \n    \"Atenci√≥n de urgencias\",\n    \"Consultas a domicilio\",\n    \"Laboratorio cl√≠nico\",\n    \"Imagenolog√≠a\"\n  ],\n  contacto: {\n    telefono: \"+57 123 456 7890\",\n    whatsapp: \"+57 123 456 7890\",\n    email: \"info@consultorio.com\",\n    direccion: \"Calle 123 #45-67, Bogot√°\"\n  },\n  especialidades: [\n    \"Medicina General\",\n    \"Cardiolog√≠a\", \n    \"Dermatolog√≠a\",\n    \"Ginecolog√≠a\",\n    \"Pediatr√≠a\",\n    \"Ortopedia\",\n    \"Oftalmolog√≠a\"\n  ]\n};\n\n// ============ FUNCI√ìN PARA PROCESAR PAR√ÅMETROS ============\nfunction procesarParametros(consulta) {\n  console.log('üîç Procesando consulta:', consulta);\n  \n  if (!consulta || typeof consulta !== 'string') {\n    return {\n      categoria: 'servicios',\n      formato: 'lista'\n    };\n  }\n  \n  const consultaLower = consulta.toLowerCase().trim();\n  \n  // Determinar categor√≠a basada en palabras clave\n  let categoria = 'servicios'; // Por defecto\n  \n  if (consultaLower.includes('precio') || consultaLower.includes('costo') || consultaLower.includes('tarifa')) {\n    categoria = 'precios';\n  } else if (consultaLower.includes('horario') || consultaLower.includes('hora') || consultaLower.includes('tiempo')) {\n    categoria = 'horarios';\n  } else if (consultaLower.includes('contacto') || consultaLower.includes('telefono') || consultaLower.includes('direccion')) {\n    categoria = 'contacto';\n  } else if (consultaLower.includes('especialidad') || consultaLower.includes('especialista')) {\n    categoria = 'especialidades';\n  } else if (consultaLower.includes('servicio') || consultaLower.includes('que hacen') || consultaLower.includes('ofertas')) {\n    categoria = 'servicios';\n  }\n  \n  // Determinar formato\n  const formato = categoria === 'precios' ? 'detallado' : 'lista';\n  \n  console.log('‚úÖ Par√°metros determinados:', { categoria, formato });\n  \n  return { categoria, formato };\n}\n\n// ============ FUNCI√ìN PARA FORMATEAR RESPUESTA ============\nfunction formatearRespuesta(datos, formato, categoria) {\n  console.log('üìù Formateando respuesta para:', categoria);\n  \n  const respuesta = {\n    error: false,\n    categoria: categoria,\n    timestamp: new Date().toISOString()\n  };\n  \n  switch (categoria) {\n    case 'precios':\n      respuesta.mensaje = \"üí∞ Tarifas del Consultorio\";\n      respuesta.datos = {};\n      for (const [servicio, precio] of Object.entries(datos)) {\n        respuesta.datos[servicio] = `$${precio.toLocaleString('es-CO')} COP`;\n      }\n      break;\n      \n    case 'horarios':\n      respuesta.mensaje = \"üïí Horarios de Atenci√≥n\";\n      respuesta.datos = datos;\n      break;\n      \n    case 'servicios':\n      respuesta.mensaje = \"üè• Servicios Disponibles\";\n      respuesta.datos = datos;\n      break;\n      \n    case 'contacto':\n      respuesta.mensaje = \"üìû Informaci√≥n de Contacto\";\n      respuesta.datos = datos;\n      break;\n      \n    case 'especialidades':\n      respuesta.mensaje = \"üë®‚Äç‚öïÔ∏è Especialidades M√©dicas\";\n      respuesta.datos = datos;\n      break;\n      \n    default:\n      respuesta.mensaje = \"‚ÑπÔ∏è Informaci√≥n General\";\n      respuesta.datos = datos;\n  }\n  \n  return respuesta;\n}\n\n// ============ FUNCI√ìN PRINCIPAL PARA MCP ============\ntry {\n  console.log('üöÄ Iniciando herramienta MCP consultorio');\n  \n  // Obtener la consulta del par√°metro query\n  let consultaValue;\n  \n  console.log('üì• Query recibido:', query);\n  console.log('üì• Tipo de query:', typeof query);\n  \n  // Parsear el JSON string que llega en query\n  if (typeof query === 'string') {\n    try {\n      const parsed = JSON.parse(query);\n      consultaValue = parsed.consulta || query;\n      console.log('‚úÖ JSON parseado exitosamente');\n      console.log('‚úÖ Consulta extra√≠da:', consultaValue);\n    } catch (parseError) {\n      console.log('‚ö†Ô∏è Error parseando JSON, usando query directo:', parseError.message);\n      consultaValue = query;\n    }\n  } else if (typeof query === 'object' && query.consulta) {\n    consultaValue = query.consulta;\n  } else {\n    consultaValue = query || 'servicios';\n  }\n  \n  console.log('üéØ Consulta final a procesar:', consultaValue);\n  \n  // 1. Procesar par√°metros\n  const params = procesarParametros(consultaValue);\n  console.log('üéØ Par√°metros procesados:', params);\n  \n  // 2. Validar categor√≠a\n  if (!CONSULTORIO_DATA[params.categoria]) {\n    const error = {\n      error: true,\n      mensaje: `Categor√≠a '${params.categoria}' no encontrada`,\n      categorias_disponibles: Object.keys(CONSULTORIO_DATA),\n      consulta_recibida: consultaValue,\n      timestamp: new Date().toISOString()\n    };\n    \n    console.log('‚ùå Error categor√≠a:', error);\n    return JSON.stringify(error);\n  }\n  \n  // 3. Obtener datos\n  const datos = CONSULTORIO_DATA[params.categoria];\n  console.log('üìä Datos obtenidos para categoria:', params.categoria);\n  \n  // 4. Formatear respuesta\n  const resultado = formatearRespuesta(datos, params.formato, params.categoria);\n  console.log('‚úÖ Resultado formateado');\n  \n  // Retornar como string JSON\n  return JSON.stringify(resultado);\n  \n} catch (error) {\n  console.error('‚ùå Error general:', error);\n  \n  const errorResponse = {\n    error: true,\n    mensaje: \"Error procesando consulta\",\n    detalle: error.message,\n    timestamp: new Date().toISOString(),\n    debug_info: {\n      error_stack: error.stack,\n      input_received: typeof query !== 'undefined' ? query : 'undefined'\n    }\n  };\n  \n  return JSON.stringify(errorResponse);\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.2,
      "position": [
        0,
        100
      ],
      "id": "7385f693-39a0-442a-8cce-4f59b56e86ce",
      "name": "info_consultorio_tool"
    }
  ],
  "pinData": {},
  "connections": {
    "info_consultorio_tool": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Argentina/Buenos_Aires",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "81790306-2647-4571-a195-ed9c68df6457",
  "meta": {
    "instanceId": "b18105836edfcad81c12a54f0db8e5674265d02aede82c32c986c199a9b2234c"
  },
  "id": "MEo7lSLVOB4rO9BX",
  "tags": []
}